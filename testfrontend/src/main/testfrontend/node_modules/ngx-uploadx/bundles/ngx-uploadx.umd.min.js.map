{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-uploadx/interfaces.ts","ng://ngx-uploadx/backoff_retry.ts","ng://ngx-uploadx/uploader.ts","ng://ngx-uploadx/resolve_url.ts","ng://ngx-uploadx/uploadx.service.ts","ng://ngx-uploadx/uploadx.directive.ts","ng://ngx-uploadx/uploadx.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","UploadxOptions","BackoffRetry","min","max","k","code","retryAttempts","delay","wait","_this","Math","setTimeout","floor","random","reset","noop","Uploader","file","options","retry","chunkSize","maxRetryAttempts","uploadId","toString","substring","name","size","mimeType","type","stateChange","configure","_status","_xhr_","abort","URI","request","notifyState","item","headers","token","endpoint","lastModified","unfunc","refreshToken","state","progress","percentage","remaining","response","responseStatus","speed","status","processResponse","xhr","parseJson","statusType","_token","maxAttemptsReached","console","error","create","xhr_1","XMLHttpRequest","open","method","toUpperCase","setupXHR","setRequestHeader","onload","location","getKeyFromResponse","url","baseURI","indexOf","URL","href","_a","matches","match","resolveUrl","onerror","send","JSON","stringify","upload","startTime","Date","getTime","sendChunk","undefined","offset","setupEvents","end","slice","onprogress","setupProgressEvent","onError","getNextChunkOffset","pEvent","uploaded","lengthComputable","loaded","total","toFixed","now","round","ceil","str","o","m","ar","__read","responseType","withCredentials","keys","forEach","payload","fromHeader","getResponseHeader","find","toLowerCase","parse","responseText","Function","UploadxService","eventsStream","Subject","queue","concurrency","autoUpload","evt","events","subscribe","processQueue","asObservable","init","connect","pipe","startWith","map","disconnect","handleFileList","fileList","uploader","uploaderOptions","autoUploadFiles","handleFile","filter","control","event","action","uploadId_1","itemOptions","running","runningProcess","Injectable","providedIn","UploadxDirective","elementRef","renderer","uploadService","uploadxState","EventEmitter","fileListener","nativeElement","files","ctrlEvent","ngOnInit","uploadx","allowedTypes","setAttribute","emit","listenerFn","listen","ngOnDestroy","tslib_1.__decorate","Output","Input","Directive","selector","ElementRef","Renderer2","UploadxModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export type UploadStatus =\n  | 'added'\n  | 'queue'\n  | 'uploading'\n  | 'complete'\n  | 'error'\n  | 'cancelled'\n  | 'paused'\n  | 'retry';\n\nexport type UploadAction =\n  | 'create'\n  | 'refreshToken'\n  | 'uploadAll'\n  | 'upload'\n  | 'cancel'\n  | 'cancelAll'\n  | 'pauseAll'\n  | 'pause';\n\nexport interface UploadxControlEvent {\n  token?: string | (() => string);\n  action: UploadAction;\n  /**\n   * override global options\n   */\n  itemOptions?: UploadItem;\n  /** Upload unique identifier */\n  uploadId?: string;\n}\n\n/**\n *  Read only upload stream events\n */\nexport type UploadEvent = UploadState;\n\nexport interface UploadState {\n  file: File;\n  name: string;\n  progress: number;\n  percentage: number;\n  remaining: number;\n  response: any;\n  responseStatus: number;\n  size: number;\n  speed: number;\n  status: UploadStatus;\n  uploadId: string;\n  URI: string;\n}\n\nexport interface UploadItem {\n  /**\n   * Upload API initial method\n   * @defaultValue 'POST'\n   */\n  method?: string;\n  readonly uploadId?: string;\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   */\n  endpoint?: string;\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   * @deprecated Use {@link UploadItem.endpoint} instead.\n   */\n  url?: string;\n  /**\n   * Custom headers\n   */\n  headers?: { [key: string]: string } | ((file?: File) => { [key: string]: string });\n  /**\n   * Upload meta\n   * @defaultValue\n   * { name: File.Filename, mimeType: File.type }\n   */\n  metadata?: { [key: string]: any } | ((file?: File) => { [key: string]: any });\n  /**\n   * Authorization Bearer token\n   */\n  token?: string | (() => string);\n}\n/**\n * Global Options\n */\nexport class UploadxOptions {\n  /**\n   *  Set \"accept\" attribute\n   * @example\n   * allowedTypes: 'image/*, video/*'\n   */\n  allowedTypes?: string;\n  /**\n   * Auto upload with global options\n   * @defaultValue true\n   */\n  autoUpload?: boolean;\n  /**\n   * If set use chunks for upload\n   * @defaultValue 0\n   */\n  chunkSize?: number;\n  /**\n   * Uploads in parallel\n   * @defaultValue 2\n   */\n  concurrency?: number;\n  /**\n   * Custom headers\n   */\n  headers?: { [key: string]: string } | ((file?: File) => { [key: string]: string });\n  /**\n   * Upload API initial method\n   * @defaultValue 'POST'\n   */\n  method?: string;\n  /**\n   * Upload meta\n   * @defaultValue\n   * { name: File.Filename, mimeType: File.type }\n   */\n  metadata?: { [key: string]: any } | ((file?: File) => { [key: string]: any });\n  /**\n   * Authorization Bearer token\n   */\n  token?: string | (() => string);\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   */\n  endpoint?: string;\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   * @deprecated Use {@link UploadxOptions.endpoint} instead.\n   */\n  url?: string;\n  /**\n   * Use withCredentials xhr option?\n   * @defaultValue false\n   */\n  withCredentials?: boolean;\n  /**\n   * Max status 4xx retries\n   * @defaultValue 3\n   */\n  maxRetryAttempts?: number;\n}\n","/**\n *  Exponential Backoff Retries\n */\nexport class BackoffRetry {\n  private delay: number;\n  private code = -1;\n  retryAttempts = 1;\n  /**\n   * @param min  Initial retry delay\n   * @param max  Max retry delay\n   * @param k    Increase factor\n   */\n  constructor(private min = 200, private max = min * 300, private k = 2) {\n    this.delay = this.min;\n  }\n  /**\n   * Delay Retry\n   * @param code\n   * @returns retryAttempts\n   */\n  wait(code?: number): Promise<number> {\n    return new Promise(resolve => {\n      if (code === this.code) {\n        this.retryAttempts++;\n        this.delay = Math.min(this.delay * this.k, this.max);\n      } else {\n        this.delay = this.min;\n        this.retryAttempts = 1;\n      }\n      this.code = code;\n      setTimeout(\n        () => resolve(this.retryAttempts),\n        this.delay + Math.floor(Math.random() * this.min)\n      );\n    });\n  }\n  /**\n   * Reset Retry\n   */\n  reset(): void {\n    this.delay = this.min;\n    this.retryAttempts = 1;\n    this.code = -1;\n  }\n}\n","/**\n * Implements XHR/CORS Resumable Upload\n * @see\n * https://developers.google.com/drive/v3/web/resumable-upload\n */\n\nimport { resolveUrl } from './resolve_url';\nimport { BackoffRetry } from './backoff_retry';\nimport { UploadStatus, UploadItem, UploadState } from './interfaces';\n\n/**\n *\n */\nexport interface UploaderOptions extends UploadItem {\n  maxRetryAttempts: number;\n  chunkSize?: number;\n  withCredentials?: boolean;\n  readonly stateChange?: any;\n}\nconst noop = () => {};\n\nexport class Uploader {\n  headers: { [key: string]: string } | null;\n  metadata: { [key: string]: any };\n  endpoint: string;\n  private _status: UploadStatus;\n  private retry = new BackoffRetry();\n  private startTime: number;\n  progress: number;\n  readonly mimeType: string;\n  readonly name: string;\n  readonly size: number;\n  readonly uploadId: string;\n  remaining: number;\n  response: any;\n  responseStatus: number;\n  speed: number;\n  URI: string;\n  token: string | (() => string);\n  private statusType: number;\n  private _token: string;\n  private _xhr_: XMLHttpRequest;\n  private chunkSize = 1_048_576;\n  private maxRetryAttempts = 3;\n  private stateChange: (evt: UploadState) => void;\n\n  set status(s: UploadStatus) {\n    // Return if State is cancelled or complete (but allow cancel of an complete upload to remove from list and from server)\n    if (this._status === 'cancelled' || (this._status === 'complete' && s !== 'cancelled')) {\n      return;\n    }\n    if (s !== this._status) {\n      if (this._xhr_ && (s === 'cancelled' || s === 'paused')) {\n        this._xhr_.abort();\n      }\n      if (s === 'cancelled' && this.URI) {\n        this.request('delete');\n      }\n      this._status = s;\n      this.notifyState();\n    }\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  /**\n   * Creates an instance of Uploader.\n   */\n  constructor(private readonly file: File, public options: UploaderOptions) {\n    this.uploadId = Math.random()\n      .toString(36)\n      .substring(2, 15);\n    this.name = file.name;\n    this.size = file.size;\n    this.mimeType = file.type || 'application/octet-stream';\n    this.stateChange = options.stateChange || noop;\n    this.configure(options);\n  }\n\n  /**\n   * configure or reconfigure uploader\n   */\n  configure(item = {} as UploadItem): void {\n    const { metadata, headers, token, endpoint } = item;\n    this.metadata = {\n      name: this.name,\n      mimeType: this.mimeType,\n      size: this.file.size,\n      lastModified: this.file.lastModified,\n      ...unfunc(metadata || this.metadata, this.file)\n    };\n    this.endpoint = endpoint || this.options.endpoint;\n    this.chunkSize = this.options.chunkSize || this.chunkSize;\n    this.maxRetryAttempts = this.options.maxRetryAttempts || this.maxRetryAttempts;\n    this.refreshToken(token);\n    this.headers = { ...this.headers, ...unfunc(headers, this.file) };\n  }\n\n  /**\n   * Emit current state\n   */\n  private notifyState(): void {\n    const state: UploadState = {\n      file: this.file,\n      name: this.name,\n      progress: this.progress,\n      percentage: this.progress,\n      remaining: this.remaining,\n      response: this.response,\n      responseStatus: this.responseStatus,\n      size: this.size,\n      speed: this.speed,\n      status: this._status,\n      uploadId: this.uploadId,\n      URI: this.URI\n    };\n    this.stateChange(state);\n  }\n\n  private processResponse(xhr: XMLHttpRequest): void {\n    this.responseStatus = xhr.status;\n    this.response = parseJson(xhr);\n    this.statusType = xhr.status - (xhr.status % 100);\n  }\n\n  refreshToken(token?: any): void {\n    this.token = token || this.token;\n    this._token = unfunc(this.token);\n  }\n\n  private maxAttemptsReached(): boolean | never {\n    if (this.retry.retryAttempts === this.maxRetryAttempts && this.statusType === 400) {\n      this.retry.reset();\n      console.error(\n        `Error: Maximum number of retry attempts reached:\n          file: ${this.name},\n          statusCode: ${this.responseStatus}`\n      );\n      return true;\n    }\n  }\n\n  private create(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.URI || this.responseStatus === 404) {\n        // get file URI\n        const xhr: XMLHttpRequest = new XMLHttpRequest();\n        xhr.open(this.options.method.toUpperCase(), this.endpoint, true);\n        this.setupXHR(xhr);\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n        xhr.setRequestHeader('X-Upload-Content-Length', this.size.toString());\n        xhr.setRequestHeader('X-Upload-Content-Type', this.mimeType);\n        xhr.onload = () => {\n          this.processResponse(xhr);\n          const location = this.statusType === 200 && getKeyFromResponse(xhr, 'location');\n          if (!location) {\n            // limit attempts\n            this.statusType = 400;\n            reject();\n          } else {\n            this.URI = resolveUrl(location, this.endpoint);\n            this.retry.reset();\n            resolve();\n          }\n        };\n        xhr.onerror = () => reject();\n        xhr.send(JSON.stringify(this.metadata));\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Initiate upload\n   */\n  async upload(item?: UploadItem | undefined): Promise<void> {\n    if (item) this.configure(item);\n    if (this._status === 'cancelled' || this._status === 'complete' || this._status === 'paused') {\n      return;\n    }\n    this.status = 'uploading';\n    this.refreshToken();\n    try {\n      await this.create();\n      this.startTime = new Date().getTime();\n      this.sendChunk(this.progress ? undefined : 0);\n    } catch (e) {\n      if (this.maxAttemptsReached()) {\n        this.status = 'error';\n      } else {\n        this.status = 'retry';\n        await this.retry.wait(this.responseStatus);\n        this.status = 'queue';\n      }\n    }\n  }\n\n  /**\n   * Chunk upload +/ get offset\n   */\n  private sendChunk(offset?: number): void {\n    if (this.status === 'uploading') {\n      let body = null;\n      const xhr: XMLHttpRequest = new XMLHttpRequest();\n      xhr.open('PUT', this.URI, true);\n      this.setupXHR(xhr);\n      this.setupEvents(xhr);\n      if (offset >= 0 && offset < this.size) {\n        const end = this.chunkSize ? Math.min(offset + this.chunkSize, this.size) : this.size;\n        body = this.file.slice(offset, end);\n        xhr.upload.onprogress = this.setupProgressEvent(offset, end);\n        xhr.setRequestHeader('Content-Range', `bytes ${offset}-${end - 1}/${this.size}`);\n        xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n      } else {\n        xhr.setRequestHeader('Content-Range', `bytes */${this.size}`);\n      }\n      xhr.send(body);\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest): void {\n    const onError = async () => {\n      if (this.maxAttemptsReached()) {\n        this.status = 'error';\n        return;\n      }\n      this.status = 'retry';\n      await this.retry.wait(xhr.status);\n      if (xhr.status === 404) {\n        this.status = 'queue';\n        return;\n      }\n      if (xhr.status === 413) {\n        this.chunkSize /= 2;\n      }\n      this.refreshToken();\n      this.status = 'uploading';\n      // request offset\n      this.sendChunk();\n    };\n    const onSuccess = () => {\n      this.processResponse(xhr);\n      const offset = this.statusType === 300 && this.getNextChunkOffset(xhr);\n      if (typeof offset === 'number') {\n        //  next chunk\n        this.retry.reset();\n        this.sendChunk(offset);\n      } else if (this.statusType === 200) {\n        this.progress = 100;\n        this.status = 'complete';\n      } else {\n        onError();\n      }\n    };\n    xhr.onerror = onError;\n    xhr.onload = onSuccess;\n  }\n\n  private setupProgressEvent(offset: number, end: number) {\n    return (pEvent: ProgressEvent) => {\n      const uploaded = pEvent.lengthComputable\n        ? offset + (end - offset) * (pEvent.loaded / pEvent.total)\n        : offset;\n      this.progress = +((uploaded / this.size) * 100).toFixed(2);\n      const now = new Date().getTime();\n      this.speed = Math.round((uploaded / (now - this.startTime)) * 1000);\n      this.remaining = Math.ceil((this.size - uploaded) / this.speed);\n      this.notifyState();\n    };\n  }\n\n  private getNextChunkOffset(xhr: XMLHttpRequest) {\n    const str = getKeyFromResponse(xhr, 'Range');\n    const [match] = str && str.match(/(-1|\\d+)$/g);\n    return match && +match + 1;\n  }\n\n  private setupXHR(xhr: XMLHttpRequest) {\n    //reset response\n    this.responseStatus = null;\n    this.response = null;\n    this.statusType = null;\n\n    this._xhr_ = xhr;\n\n    xhr.responseType = 'json';\n    xhr.withCredentials = this.options.withCredentials;\n    Object.keys(this.headers).forEach(key => xhr.setRequestHeader(key, this.headers[key]));\n    // tslint:disable-next-line: no-unused-expression\n    this._token && xhr.setRequestHeader('Authorization', `Bearer ${this._token}`);\n  }\n\n  request(method: string, payload = null) {\n    return new Promise((resolve, reject) => {\n      const xhr: XMLHttpRequest = new XMLHttpRequest();\n      xhr.open(method.toUpperCase(), this.URI, true);\n      this.setupXHR(xhr);\n      xhr.onload = () => {\n        this.processResponse(xhr);\n        resolve();\n      };\n      xhr.onerror = () => reject();\n      const body = payload ? JSON.stringify(payload) : null;\n      xhr.send(body);\n    });\n  }\n}\n\nfunction getKeyFromResponse(xhr: XMLHttpRequest, key: string) {\n  const fromHeader = xhr.getResponseHeader(key);\n  if (fromHeader) {\n    return fromHeader;\n  }\n  const response = parseJson(xhr) || {};\n  const resKey = Object.keys(response).find(k => k.toLowerCase() === key.toLowerCase());\n  return response[resKey];\n}\n\nfunction parseJson(xhr: XMLHttpRequest) {\n  return typeof xhr.response === 'object' ? xhr.response : JSON.parse(xhr.responseText || null);\n}\n\nfunction unfunc<T>(value: T | ((file: File) => T), file?: File): T {\n  return value instanceof Function ? value(file) : value;\n}\n","export function resolveUrl(url: string, baseURI: string) {\n  if (url.indexOf('//') * url.indexOf('https://') * url.indexOf('http://') === 0) {\n    return url;\n  }\n  try {\n    const res = new URL(url, baseURI).href;\n    return res;\n  } catch {\n    if (url.indexOf('/') === 0) {\n      const matches = baseURI.match(/^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)/g);\n      const origin = matches && matches[0];\n      return origin + url;\n    } else {\n      const matches = baseURI.match(/^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)?(.*\\/)/g);\n      const path = matches && matches[0];\n      return path + url;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  UploadState,\n  UploadStatus,\n  UploadxControlEvent,\n  UploadxOptions,\n  UploadEvent\n} from './interfaces';\nimport { Uploader, UploaderOptions } from './uploader';\nimport { map, startWith } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class UploadxService {\n  private readonly eventsStream: Subject<UploadState> = new Subject();\n  get events() {\n    return this.eventsStream.asObservable();\n  }\n  queue: Uploader[] = [];\n  private concurrency = 2;\n  private autoUpload = true;\n  private options: UploadxOptions;\n  stateChange = (evt: UploadState) => {\n    setTimeout(() => {\n      this.eventsStream.next(evt);\n    });\n  };\n\n  get uploaderOptions(): UploaderOptions {\n    return {\n      method: this.options.method || 'POST',\n      // tslint:disable-next-line: deprecation\n      endpoint: this.options.endpoint || this.options.url || '/upload',\n      headers: this.options.headers,\n      metadata: this.options.metadata,\n      token: this.options.token,\n      chunkSize: this.options.chunkSize,\n      withCredentials: this.options.withCredentials,\n      maxRetryAttempts: this.options.maxRetryAttempts,\n      stateChange: this.stateChange\n    };\n  }\n\n  constructor() {\n    this.events.subscribe((evt: UploadEvent) => {\n      if (evt.status !== 'uploading' && evt.status !== 'added') {\n        this.processQueue();\n      }\n    });\n  }\n  /**\n   * Initializes service\n   * @param options global options\n   * @returns Observable that emits a new value on progress or status changes\n   */\n  init(options: UploadxOptions): Observable<UploadState> {\n    this.options = options;\n    this.concurrency = options.concurrency || this.concurrency;\n    this.autoUpload = !(options.autoUpload === false);\n    return this.events;\n  }\n  /**\n   * Initializes service\n   * @param options global options\n   * @returns Observable that emits the current queue\n   */\n  connect(options?: UploadxOptions): Observable<Uploader[]> {\n    return this.init(options || this.options).pipe(\n      startWith(0),\n      map(() => this.queue)\n    );\n  }\n\n  /**\n   * Terminate all uploads and clears the queue\n   */\n  disconnect() {\n    this.queue.forEach(f => (f.status = 'paused'));\n    this.queue = [];\n  }\n  /**\n   * Create Uploader and add to the queue\n   */\n  handleFileList(fileList: FileList) {\n    for (let i = 0; i < fileList.length; i++) {\n      const uploader: Uploader = new Uploader(fileList.item(i), this.uploaderOptions);\n      this.queue.push(uploader);\n      uploader.status = 'added';\n    }\n    this.autoUploadFiles();\n  }\n  /**\n   * Create Uploader for the file and add to the queue\n   */\n  handleFile(file: File): void {\n    const uploader: Uploader = new Uploader(file, this.uploaderOptions);\n    this.queue.push(uploader);\n    uploader.status = 'added';\n    this.autoUploadFiles();\n  }\n  /**\n   * Auto upload the files if the flag is true\n   * @internal\n   */\n  private autoUploadFiles(): void {\n    if (this.autoUpload) {\n      this.queue.filter(f => f.status === 'added').forEach(f => (f.status = 'queue'));\n    }\n  }\n  /**\n   * Control uploads status\n   * @example\n   * this.uploadService.control({ action: 'pauseAll' });\n   *\n   */\n  control(event: UploadxControlEvent): void {\n    switch (event.action) {\n      case 'cancelAll':\n        this.queue.forEach(f => (f.status = 'cancelled'));\n        break;\n      case 'pauseAll':\n        this.queue.forEach(f => (f.status = 'paused'));\n        break;\n      case 'refreshToken':\n        this.queue.forEach(f => f.refreshToken(event.token));\n        break;\n      case 'uploadAll':\n        this.queue.filter(f => f.status !== 'uploading').forEach(f => (f.status = 'queue'));\n        break;\n      case 'upload':\n        const uploadId = event.uploadId || event.itemOptions.uploadId;\n        const upload = this.queue.find(f => f.uploadId === uploadId);\n        upload.configure(event.itemOptions);\n        upload.status = 'queue' as UploadStatus;\n        break;\n      case 'cancel':\n        this.queue.find(f => f.uploadId === event.uploadId).status = 'cancelled';\n        break;\n      case 'pause':\n        this.queue.find(f => f.uploadId === event.uploadId).status = 'paused';\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Queue management\n   * @internal\n   */\n  private processQueue() {\n    // Remove Cancelled Items from local queue\n    this.queue = this.queue.filter(f => f.status !== 'cancelled');\n\n    const running = this.runningProcess();\n\n    this.queue\n      .filter((uploader: Uploader) => uploader.status === 'queue')\n      .slice(0, Math.max(this.concurrency - running, 0))\n      .forEach((uploader: Uploader) => {\n        uploader.upload();\n      });\n  }\n  /**\n   * @returns  number of active uploads\n   */\n  runningProcess(): number {\n    return this.queue.filter(\n      (uploader: Uploader) => uploader.status === 'uploading' || uploader.status === 'retry'\n    ).length;\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  OnInit,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { UploadxOptions, UploadState, UploadxControlEvent } from './interfaces';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({\n  selector: '[uploadx]'\n})\nexport class UploadxDirective implements OnInit, OnDestroy {\n  listenerFn: () => void;\n  @Output()\n  uploadxState = new EventEmitter();\n  @Input()\n  uploadx: UploadxOptions;\n  @Input()\n  set uploadxAction(ctrlEvent: UploadxControlEvent) {\n    if (ctrlEvent && this.uploadService) {\n      this.uploadService.control(ctrlEvent);\n    }\n  }\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private uploadService: UploadxService\n  ) {}\n\n  ngOnInit() {\n    if (this.uploadx) {\n      if (this.uploadx.allowedTypes) {\n        this.renderer.setAttribute(\n          this.elementRef.nativeElement,\n          'accept',\n          this.uploadx.allowedTypes\n        );\n      }\n      this.uploadService.init(this.uploadx);\n    }\n    this.uploadxState.emit(<Observable<UploadState>>this.uploadService.events);\n    this.listenerFn = this.renderer.listen(\n      this.elementRef.nativeElement,\n      'change',\n      this.fileListener\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.listenerFn) {\n      this.listenerFn();\n    }\n  }\n\n  fileListener = () => {\n    if (this.elementRef.nativeElement.files) {\n      this.uploadService.handleFileList(this.elementRef.nativeElement.files);\n    }\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UploadxDirective } from './uploadx.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UploadxDirective],\n  exports: [UploadxDirective]\n})\nexport class UploadxModule {}\n"]}