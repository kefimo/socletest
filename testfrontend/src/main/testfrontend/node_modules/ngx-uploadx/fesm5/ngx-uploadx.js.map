{"version":3,"file":"ngx-uploadx.js","sources":["ng://ngx-uploadx/interfaces.ts","ng://ngx-uploadx/resolve_url.ts","ng://ngx-uploadx/backoff_retry.ts","ng://ngx-uploadx/uploader.ts","ng://ngx-uploadx/uploadx.service.ts","ng://ngx-uploadx/uploadx.directive.ts","ng://ngx-uploadx/uploadx.module.ts","ng://ngx-uploadx/ngx-uploadx.ts"],"sourcesContent":["export type UploadStatus =\n  | 'added'\n  | 'queue'\n  | 'uploading'\n  | 'complete'\n  | 'error'\n  | 'cancelled'\n  | 'paused'\n  | 'retry';\n\nexport type UploadAction =\n  | 'create'\n  | 'refreshToken'\n  | 'uploadAll'\n  | 'upload'\n  | 'cancel'\n  | 'cancelAll'\n  | 'pauseAll'\n  | 'pause';\n\nexport interface UploadxControlEvent {\n  token?: string | (() => string);\n  action: UploadAction;\n  /**\n   * override global options\n   */\n  itemOptions?: UploadItem;\n  /** Upload unique identifier */\n  uploadId?: string;\n}\n\n/**\n *  Read only upload stream events\n */\nexport type UploadEvent = UploadState;\n\nexport interface UploadState {\n  file: File;\n  name: string;\n  progress: number;\n  percentage: number;\n  remaining: number;\n  response: any;\n  responseStatus: number;\n  size: number;\n  speed: number;\n  status: UploadStatus;\n  uploadId: string;\n  URI: string;\n}\n\nexport interface UploadItem {\n  /**\n   * Upload API initial method\n   * @defaultValue 'POST'\n   */\n  method?: string;\n  readonly uploadId?: string;\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   */\n  endpoint?: string;\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   * @deprecated Use {@link UploadItem.endpoint} instead.\n   */\n  url?: string;\n  /**\n   * Custom headers\n   */\n  headers?: { [key: string]: string } | ((file?: File) => { [key: string]: string });\n  /**\n   * Upload meta\n   * @defaultValue\n   * { name: File.Filename, mimeType: File.type }\n   */\n  metadata?: { [key: string]: any } | ((file?: File) => { [key: string]: any });\n  /**\n   * Authorization Bearer token\n   */\n  token?: string | (() => string);\n}\n/**\n * Global Options\n */\nexport class UploadxOptions {\n  /**\n   *  Set \"accept\" attribute\n   * @example\n   * allowedTypes: 'image/*, video/*'\n   */\n  allowedTypes?: string;\n  /**\n   * Auto upload with global options\n   * @defaultValue true\n   */\n  autoUpload?: boolean;\n  /**\n   * If set use chunks for upload\n   * @defaultValue 0\n   */\n  chunkSize?: number;\n  /**\n   * Uploads in parallel\n   * @defaultValue 2\n   */\n  concurrency?: number;\n  /**\n   * Custom headers\n   */\n  headers?: { [key: string]: string } | ((file?: File) => { [key: string]: string });\n  /**\n   * Upload API initial method\n   * @defaultValue 'POST'\n   */\n  method?: string;\n  /**\n   * Upload meta\n   * @defaultValue\n   * { name: File.Filename, mimeType: File.type }\n   */\n  metadata?: { [key: string]: any } | ((file?: File) => { [key: string]: any });\n  /**\n   * Authorization Bearer token\n   */\n  token?: string | (() => string);\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   */\n  endpoint?: string;\n  /**\n   * Upload API URL\n   * @defaultValue '/upload/'\n   * @deprecated Use {@link UploadxOptions.endpoint} instead.\n   */\n  url?: string;\n  /**\n   * Use withCredentials xhr option?\n   * @defaultValue false\n   */\n  withCredentials?: boolean;\n  /**\n   * Max status 4xx retries\n   * @defaultValue 3\n   */\n  maxRetryAttempts?: number;\n}\n","export function resolveUrl(url: string, baseURI: string) {\n  if (url.indexOf('//') * url.indexOf('https://') * url.indexOf('http://') === 0) {\n    return url;\n  }\n  try {\n    const res = new URL(url, baseURI).href;\n    return res;\n  } catch {\n    if (url.indexOf('/') === 0) {\n      const matches = baseURI.match(/^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)/g);\n      const origin = matches && matches[0];\n      return origin + url;\n    } else {\n      const matches = baseURI.match(/^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)?(.*\\/)/g);\n      const path = matches && matches[0];\n      return path + url;\n    }\n  }\n}\n","/**\n *  Exponential Backoff Retries\n */\nexport class BackoffRetry {\n  private delay: number;\n  private code = -1;\n  retryAttempts = 1;\n  /**\n   * @param min  Initial retry delay\n   * @param max  Max retry delay\n   * @param k    Increase factor\n   */\n  constructor(private min = 200, private max = min * 300, private k = 2) {\n    this.delay = this.min;\n  }\n  /**\n   * Delay Retry\n   * @param code\n   * @returns retryAttempts\n   */\n  wait(code?: number): Promise<number> {\n    return new Promise(resolve => {\n      if (code === this.code) {\n        this.retryAttempts++;\n        this.delay = Math.min(this.delay * this.k, this.max);\n      } else {\n        this.delay = this.min;\n        this.retryAttempts = 1;\n      }\n      this.code = code;\n      setTimeout(\n        () => resolve(this.retryAttempts),\n        this.delay + Math.floor(Math.random() * this.min)\n      );\n    });\n  }\n  /**\n   * Reset Retry\n   */\n  reset(): void {\n    this.delay = this.min;\n    this.retryAttempts = 1;\n    this.code = -1;\n  }\n}\n","/**\n * Implements XHR/CORS Resumable Upload\n * @see\n * https://developers.google.com/drive/v3/web/resumable-upload\n */\n\nimport { resolveUrl } from './resolve_url';\nimport { BackoffRetry } from './backoff_retry';\nimport { UploadStatus, UploadItem, UploadState } from './interfaces';\n\n/**\n *\n */\nexport interface UploaderOptions extends UploadItem {\n  maxRetryAttempts: number;\n  chunkSize?: number;\n  withCredentials?: boolean;\n  readonly stateChange?: any;\n}\nconst noop = () => {};\n\nexport class Uploader {\n  headers: { [key: string]: string } | null;\n  metadata: { [key: string]: any };\n  endpoint: string;\n  private _status: UploadStatus;\n  private retry = new BackoffRetry();\n  private startTime: number;\n  progress: number;\n  readonly mimeType: string;\n  readonly name: string;\n  readonly size: number;\n  readonly uploadId: string;\n  remaining: number;\n  response: any;\n  responseStatus: number;\n  speed: number;\n  URI: string;\n  token: string | (() => string);\n  private statusType: number;\n  private _token: string;\n  private _xhr_: XMLHttpRequest;\n  private chunkSize = 1_048_576;\n  private maxRetryAttempts = 3;\n  private stateChange: (evt: UploadState) => void;\n\n  set status(s: UploadStatus) {\n    // Return if State is cancelled or complete (but allow cancel of an complete upload to remove from list and from server)\n    if (this._status === 'cancelled' || (this._status === 'complete' && s !== 'cancelled')) {\n      return;\n    }\n    if (s !== this._status) {\n      if (this._xhr_ && (s === 'cancelled' || s === 'paused')) {\n        this._xhr_.abort();\n      }\n      if (s === 'cancelled' && this.URI) {\n        this.request('delete');\n      }\n      this._status = s;\n      this.notifyState();\n    }\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  /**\n   * Creates an instance of Uploader.\n   */\n  constructor(private readonly file: File, public options: UploaderOptions) {\n    this.uploadId = Math.random()\n      .toString(36)\n      .substring(2, 15);\n    this.name = file.name;\n    this.size = file.size;\n    this.mimeType = file.type || 'application/octet-stream';\n    this.stateChange = options.stateChange || noop;\n    this.configure(options);\n  }\n\n  /**\n   * configure or reconfigure uploader\n   */\n  configure(item = {} as UploadItem): void {\n    const { metadata, headers, token, endpoint } = item;\n    this.metadata = {\n      name: this.name,\n      mimeType: this.mimeType,\n      size: this.file.size,\n      lastModified: this.file.lastModified,\n      ...unfunc(metadata || this.metadata, this.file)\n    };\n    this.endpoint = endpoint || this.options.endpoint;\n    this.chunkSize = this.options.chunkSize || this.chunkSize;\n    this.maxRetryAttempts = this.options.maxRetryAttempts || this.maxRetryAttempts;\n    this.refreshToken(token);\n    this.headers = { ...this.headers, ...unfunc(headers, this.file) };\n  }\n\n  /**\n   * Emit current state\n   */\n  private notifyState(): void {\n    const state: UploadState = {\n      file: this.file,\n      name: this.name,\n      progress: this.progress,\n      percentage: this.progress,\n      remaining: this.remaining,\n      response: this.response,\n      responseStatus: this.responseStatus,\n      size: this.size,\n      speed: this.speed,\n      status: this._status,\n      uploadId: this.uploadId,\n      URI: this.URI\n    };\n    this.stateChange(state);\n  }\n\n  private processResponse(xhr: XMLHttpRequest): void {\n    this.responseStatus = xhr.status;\n    this.response = parseJson(xhr);\n    this.statusType = xhr.status - (xhr.status % 100);\n  }\n\n  refreshToken(token?: any): void {\n    this.token = token || this.token;\n    this._token = unfunc(this.token);\n  }\n\n  private maxAttemptsReached(): boolean | never {\n    if (this.retry.retryAttempts === this.maxRetryAttempts && this.statusType === 400) {\n      this.retry.reset();\n      console.error(\n        `Error: Maximum number of retry attempts reached:\n          file: ${this.name},\n          statusCode: ${this.responseStatus}`\n      );\n      return true;\n    }\n  }\n\n  private create(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.URI || this.responseStatus === 404) {\n        // get file URI\n        const xhr: XMLHttpRequest = new XMLHttpRequest();\n        xhr.open(this.options.method.toUpperCase(), this.endpoint, true);\n        this.setupXHR(xhr);\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n        xhr.setRequestHeader('X-Upload-Content-Length', this.size.toString());\n        xhr.setRequestHeader('X-Upload-Content-Type', this.mimeType);\n        xhr.onload = () => {\n          this.processResponse(xhr);\n          const location = this.statusType === 200 && getKeyFromResponse(xhr, 'location');\n          if (!location) {\n            // limit attempts\n            this.statusType = 400;\n            reject();\n          } else {\n            this.URI = resolveUrl(location, this.endpoint);\n            this.retry.reset();\n            resolve();\n          }\n        };\n        xhr.onerror = () => reject();\n        xhr.send(JSON.stringify(this.metadata));\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Initiate upload\n   */\n  async upload(item?: UploadItem | undefined): Promise<void> {\n    if (item) this.configure(item);\n    if (this._status === 'cancelled' || this._status === 'complete' || this._status === 'paused') {\n      return;\n    }\n    this.status = 'uploading';\n    this.refreshToken();\n    try {\n      await this.create();\n      this.startTime = new Date().getTime();\n      this.sendChunk(this.progress ? undefined : 0);\n    } catch (e) {\n      if (this.maxAttemptsReached()) {\n        this.status = 'error';\n      } else {\n        this.status = 'retry';\n        await this.retry.wait(this.responseStatus);\n        this.status = 'queue';\n      }\n    }\n  }\n\n  /**\n   * Chunk upload +/ get offset\n   */\n  private sendChunk(offset?: number): void {\n    if (this.status === 'uploading') {\n      let body = null;\n      const xhr: XMLHttpRequest = new XMLHttpRequest();\n      xhr.open('PUT', this.URI, true);\n      this.setupXHR(xhr);\n      this.setupEvents(xhr);\n      if (offset >= 0 && offset < this.size) {\n        const end = this.chunkSize ? Math.min(offset + this.chunkSize, this.size) : this.size;\n        body = this.file.slice(offset, end);\n        xhr.upload.onprogress = this.setupProgressEvent(offset, end);\n        xhr.setRequestHeader('Content-Range', `bytes ${offset}-${end - 1}/${this.size}`);\n        xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n      } else {\n        xhr.setRequestHeader('Content-Range', `bytes */${this.size}`);\n      }\n      xhr.send(body);\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest): void {\n    const onError = async () => {\n      if (this.maxAttemptsReached()) {\n        this.status = 'error';\n        return;\n      }\n      this.status = 'retry';\n      await this.retry.wait(xhr.status);\n      if (xhr.status === 404) {\n        this.status = 'queue';\n        return;\n      }\n      if (xhr.status === 413) {\n        this.chunkSize /= 2;\n      }\n      this.refreshToken();\n      this.status = 'uploading';\n      // request offset\n      this.sendChunk();\n    };\n    const onSuccess = () => {\n      this.processResponse(xhr);\n      const offset = this.statusType === 300 && this.getNextChunkOffset(xhr);\n      if (typeof offset === 'number') {\n        //  next chunk\n        this.retry.reset();\n        this.sendChunk(offset);\n      } else if (this.statusType === 200) {\n        this.progress = 100;\n        this.status = 'complete';\n      } else {\n        onError();\n      }\n    };\n    xhr.onerror = onError;\n    xhr.onload = onSuccess;\n  }\n\n  private setupProgressEvent(offset: number, end: number) {\n    return (pEvent: ProgressEvent) => {\n      const uploaded = pEvent.lengthComputable\n        ? offset + (end - offset) * (pEvent.loaded / pEvent.total)\n        : offset;\n      this.progress = +((uploaded / this.size) * 100).toFixed(2);\n      const now = new Date().getTime();\n      this.speed = Math.round((uploaded / (now - this.startTime)) * 1000);\n      this.remaining = Math.ceil((this.size - uploaded) / this.speed);\n      this.notifyState();\n    };\n  }\n\n  private getNextChunkOffset(xhr: XMLHttpRequest) {\n    const str = getKeyFromResponse(xhr, 'Range');\n    const [match] = str && str.match(/(-1|\\d+)$/g);\n    return match && +match + 1;\n  }\n\n  private setupXHR(xhr: XMLHttpRequest) {\n    //reset response\n    this.responseStatus = null;\n    this.response = null;\n    this.statusType = null;\n\n    this._xhr_ = xhr;\n\n    xhr.responseType = 'json';\n    xhr.withCredentials = this.options.withCredentials;\n    Object.keys(this.headers).forEach(key => xhr.setRequestHeader(key, this.headers[key]));\n    // tslint:disable-next-line: no-unused-expression\n    this._token && xhr.setRequestHeader('Authorization', `Bearer ${this._token}`);\n  }\n\n  request(method: string, payload = null) {\n    return new Promise((resolve, reject) => {\n      const xhr: XMLHttpRequest = new XMLHttpRequest();\n      xhr.open(method.toUpperCase(), this.URI, true);\n      this.setupXHR(xhr);\n      xhr.onload = () => {\n        this.processResponse(xhr);\n        resolve();\n      };\n      xhr.onerror = () => reject();\n      const body = payload ? JSON.stringify(payload) : null;\n      xhr.send(body);\n    });\n  }\n}\n\nfunction getKeyFromResponse(xhr: XMLHttpRequest, key: string) {\n  const fromHeader = xhr.getResponseHeader(key);\n  if (fromHeader) {\n    return fromHeader;\n  }\n  const response = parseJson(xhr) || {};\n  const resKey = Object.keys(response).find(k => k.toLowerCase() === key.toLowerCase());\n  return response[resKey];\n}\n\nfunction parseJson(xhr: XMLHttpRequest) {\n  return typeof xhr.response === 'object' ? xhr.response : JSON.parse(xhr.responseText || null);\n}\n\nfunction unfunc<T>(value: T | ((file: File) => T), file?: File): T {\n  return value instanceof Function ? value(file) : value;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  UploadState,\n  UploadStatus,\n  UploadxControlEvent,\n  UploadxOptions,\n  UploadEvent\n} from './interfaces';\nimport { Uploader, UploaderOptions } from './uploader';\nimport { map, startWith } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class UploadxService {\n  private readonly eventsStream: Subject<UploadState> = new Subject();\n  get events() {\n    return this.eventsStream.asObservable();\n  }\n  queue: Uploader[] = [];\n  private concurrency = 2;\n  private autoUpload = true;\n  private options: UploadxOptions;\n  stateChange = (evt: UploadState) => {\n    setTimeout(() => {\n      this.eventsStream.next(evt);\n    });\n  };\n\n  get uploaderOptions(): UploaderOptions {\n    return {\n      method: this.options.method || 'POST',\n      // tslint:disable-next-line: deprecation\n      endpoint: this.options.endpoint || this.options.url || '/upload',\n      headers: this.options.headers,\n      metadata: this.options.metadata,\n      token: this.options.token,\n      chunkSize: this.options.chunkSize,\n      withCredentials: this.options.withCredentials,\n      maxRetryAttempts: this.options.maxRetryAttempts,\n      stateChange: this.stateChange\n    };\n  }\n\n  constructor() {\n    this.events.subscribe((evt: UploadEvent) => {\n      if (evt.status !== 'uploading' && evt.status !== 'added') {\n        this.processQueue();\n      }\n    });\n  }\n  /**\n   * Initializes service\n   * @param options global options\n   * @returns Observable that emits a new value on progress or status changes\n   */\n  init(options: UploadxOptions): Observable<UploadState> {\n    this.options = options;\n    this.concurrency = options.concurrency || this.concurrency;\n    this.autoUpload = !(options.autoUpload === false);\n    return this.events;\n  }\n  /**\n   * Initializes service\n   * @param options global options\n   * @returns Observable that emits the current queue\n   */\n  connect(options?: UploadxOptions): Observable<Uploader[]> {\n    return this.init(options || this.options).pipe(\n      startWith(0),\n      map(() => this.queue)\n    );\n  }\n\n  /**\n   * Terminate all uploads and clears the queue\n   */\n  disconnect() {\n    this.queue.forEach(f => (f.status = 'paused'));\n    this.queue = [];\n  }\n  /**\n   * Create Uploader and add to the queue\n   */\n  handleFileList(fileList: FileList) {\n    for (let i = 0; i < fileList.length; i++) {\n      const uploader: Uploader = new Uploader(fileList.item(i), this.uploaderOptions);\n      this.queue.push(uploader);\n      uploader.status = 'added';\n    }\n    this.autoUploadFiles();\n  }\n  /**\n   * Create Uploader for the file and add to the queue\n   */\n  handleFile(file: File): void {\n    const uploader: Uploader = new Uploader(file, this.uploaderOptions);\n    this.queue.push(uploader);\n    uploader.status = 'added';\n    this.autoUploadFiles();\n  }\n  /**\n   * Auto upload the files if the flag is true\n   * @internal\n   */\n  private autoUploadFiles(): void {\n    if (this.autoUpload) {\n      this.queue.filter(f => f.status === 'added').forEach(f => (f.status = 'queue'));\n    }\n  }\n  /**\n   * Control uploads status\n   * @example\n   * this.uploadService.control({ action: 'pauseAll' });\n   *\n   */\n  control(event: UploadxControlEvent): void {\n    switch (event.action) {\n      case 'cancelAll':\n        this.queue.forEach(f => (f.status = 'cancelled'));\n        break;\n      case 'pauseAll':\n        this.queue.forEach(f => (f.status = 'paused'));\n        break;\n      case 'refreshToken':\n        this.queue.forEach(f => f.refreshToken(event.token));\n        break;\n      case 'uploadAll':\n        this.queue.filter(f => f.status !== 'uploading').forEach(f => (f.status = 'queue'));\n        break;\n      case 'upload':\n        const uploadId = event.uploadId || event.itemOptions.uploadId;\n        const upload = this.queue.find(f => f.uploadId === uploadId);\n        upload.configure(event.itemOptions);\n        upload.status = 'queue' as UploadStatus;\n        break;\n      case 'cancel':\n        this.queue.find(f => f.uploadId === event.uploadId).status = 'cancelled';\n        break;\n      case 'pause':\n        this.queue.find(f => f.uploadId === event.uploadId).status = 'paused';\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Queue management\n   * @internal\n   */\n  private processQueue() {\n    // Remove Cancelled Items from local queue\n    this.queue = this.queue.filter(f => f.status !== 'cancelled');\n\n    const running = this.runningProcess();\n\n    this.queue\n      .filter((uploader: Uploader) => uploader.status === 'queue')\n      .slice(0, Math.max(this.concurrency - running, 0))\n      .forEach((uploader: Uploader) => {\n        uploader.upload();\n      });\n  }\n  /**\n   * @returns  number of active uploads\n   */\n  runningProcess(): number {\n    return this.queue.filter(\n      (uploader: Uploader) => uploader.status === 'uploading' || uploader.status === 'retry'\n    ).length;\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  OnInit,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { UploadxOptions, UploadState, UploadxControlEvent } from './interfaces';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({\n  selector: '[uploadx]'\n})\nexport class UploadxDirective implements OnInit, OnDestroy {\n  listenerFn: () => void;\n  @Output()\n  uploadxState = new EventEmitter();\n  @Input()\n  uploadx: UploadxOptions;\n  @Input()\n  set uploadxAction(ctrlEvent: UploadxControlEvent) {\n    if (ctrlEvent && this.uploadService) {\n      this.uploadService.control(ctrlEvent);\n    }\n  }\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private uploadService: UploadxService\n  ) {}\n\n  ngOnInit() {\n    if (this.uploadx) {\n      if (this.uploadx.allowedTypes) {\n        this.renderer.setAttribute(\n          this.elementRef.nativeElement,\n          'accept',\n          this.uploadx.allowedTypes\n        );\n      }\n      this.uploadService.init(this.uploadx);\n    }\n    this.uploadxState.emit(<Observable<UploadState>>this.uploadService.events);\n    this.listenerFn = this.renderer.listen(\n      this.elementRef.nativeElement,\n      'change',\n      this.fileListener\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.listenerFn) {\n      this.listenerFn();\n    }\n  }\n\n  fileListener = () => {\n    if (this.elementRef.nativeElement.files) {\n      this.uploadService.handleFileList(this.elementRef.nativeElement.files);\n    }\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UploadxDirective } from './uploadx.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UploadxDirective],\n  exports: [UploadxDirective]\n})\nexport class UploadxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {UploadxDirective as Éµa} from './uploadx.directive';"],"names":["tslib_1.__decorate"],"mappings":";;;;;;AAoFA;;;AAGA;IAAA;KA8DC;IAAD,qBAAC;CAAA;;SCrJe,UAAU,CAAC,GAAW,EAAE,OAAe;IACrD,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;QAC9E,OAAO,GAAG,CAAC;KACZ;IACD,IAAI;QACF,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC;QACvC,OAAO,GAAG,CAAC;KACZ;IAAC,WAAM;QACN,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;YACnE,IAAM,QAAM,GAAG,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;YACrC,OAAO,QAAM,GAAG,GAAG,CAAC;SACrB;aAAM;YACL,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC1E,IAAM,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;YACnC,OAAO,IAAI,GAAG,GAAG,CAAC;SACnB;KACF;CACF;;AClBD;;;AAGA;;;;;;IASE,sBAAoB,GAAS,EAAU,GAAe,EAAU,CAAK;QAAjD,oBAAA,EAAA,SAAS;QAAU,oBAAA,EAAA,MAAM,GAAG,GAAG,GAAG;QAAU,kBAAA,EAAA,KAAK;QAAjD,QAAG,GAAH,GAAG,CAAM;QAAU,QAAG,GAAH,GAAG,CAAY;QAAU,MAAC,GAAD,CAAC,CAAI;QAP7D,SAAI,GAAG,CAAC,CAAC,CAAC;QAClB,kBAAa,GAAG,CAAC,CAAC;QAOhB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;KACvB;;;;;;IAMD,2BAAI,GAAJ,UAAK,IAAa;QAAlB,iBAeC;QAdC,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACxB,IAAI,IAAI,KAAK,KAAI,CAAC,IAAI,EAAE;gBACtB,KAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,CAAC,EAAE,KAAI,CAAC,GAAG,CAAC,CAAC;aACtD;iBAAM;gBACL,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,GAAG,CAAC;gBACtB,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC;aACxB;YACD,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,UAAU,CACR,cAAM,OAAA,OAAO,CAAC,KAAI,CAAC,aAAa,CAAC,GAAA,EACjC,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAI,CAAC,GAAG,CAAC,CAClD,CAAC;SACH,CAAC,CAAC;KACJ;;;;IAID,4BAAK,GAAL;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;KAChB;IACH,mBAAC;CAAA,IAAA;;AC5CD;;;;;AAmBA,IAAM,IAAI,GAAG,eAAQ,CAAC;;;;;IAmDpB,kBAA6B,IAAU,EAAS,OAAwB;QAA3C,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAiB;QA5ChE,UAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QAgB3B,cAAS,GAAG,OAAS,CAAC;QACtB,qBAAgB,GAAG,CAAC,CAAC;QA4B3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE;aAC1B,QAAQ,CAAC,EAAE,CAAC;aACZ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,IAAI,0BAA0B,CAAC;QACxD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC;QAC/C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;KACzB;IAjCD,sBAAI,4BAAM;aAiBV;YACE,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;aAnBD,UAAW,CAAe;;YAExB,IAAI,IAAI,CAAC,OAAO,KAAK,WAAW,KAAK,IAAI,CAAC,OAAO,KAAK,UAAU,IAAI,CAAC,KAAK,WAAW,CAAC,EAAE;gBACtF,OAAO;aACR;YACD,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;gBACtB,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,KAAK,WAAW,IAAI,CAAC,KAAK,QAAQ,CAAC,EAAE;oBACvD,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;iBACpB;gBACD,IAAI,CAAC,KAAK,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE;oBACjC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACxB;gBACD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;gBACjB,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;SACF;;;OAAA;;;;IAuBD,4BAAS,GAAT,UAAU,IAAuB;QAAvB,qBAAA,EAAA,OAAO,EAAgB;QACvB,IAAA,wBAAQ,EAAE,sBAAO,EAAE,kBAAK,EAAE,wBAAQ,CAAU;QACpD,IAAI,CAAC,QAAQ,cACX,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EACpB,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,IACjC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAChD,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAClD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;QAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC;QAC/E,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,gBAAQ,IAAI,CAAC,OAAO,EAAK,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC;KACnE;;;;IAKO,8BAAW,GAAnB;QACE,IAAM,KAAK,GAAgB;YACzB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,UAAU,EAAE,IAAI,CAAC,QAAQ;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,GAAG,EAAE,IAAI,CAAC,GAAG;SACd,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KACzB;IAEO,kCAAe,GAAvB,UAAwB,GAAmB;QACzC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;KACnD;IAED,+BAAY,GAAZ,UAAa,KAAW;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;IAEO,qCAAkB,GAA1B;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG,EAAE;YACjF,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,OAAO,CAAC,KAAK,CACX,uEACU,IAAI,CAAC,IAAI,iCACH,IAAI,CAAC,cAAgB,CACtC,CAAC;YACF,OAAO,IAAI,CAAC;SACb;KACF;IAEO,yBAAM,GAAd;QAAA,iBA6BC;QA5BC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,KAAI,CAAC,GAAG,IAAI,KAAI,CAAC,cAAc,KAAK,GAAG,EAAE;;gBAE5C,IAAM,KAAG,GAAmB,IAAI,cAAc,EAAE,CAAC;gBACjD,KAAG,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,KAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACjE,KAAI,CAAC,QAAQ,CAAC,KAAG,CAAC,CAAC;gBACnB,KAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAC;gBACxE,KAAG,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACtE,KAAG,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7D,KAAG,CAAC,MAAM,GAAG;oBACX,KAAI,CAAC,eAAe,CAAC,KAAG,CAAC,CAAC;oBAC1B,IAAM,QAAQ,GAAG,KAAI,CAAC,UAAU,KAAK,GAAG,IAAI,kBAAkB,CAAC,KAAG,EAAE,UAAU,CAAC,CAAC;oBAChF,IAAI,CAAC,QAAQ,EAAE;;wBAEb,KAAI,CAAC,UAAU,GAAG,GAAG,CAAC;wBACtB,MAAM,EAAE,CAAC;qBACV;yBAAM;wBACL,KAAI,CAAC,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;wBAC/C,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;wBACnB,OAAO,EAAE,CAAC;qBACX;iBACF,CAAC;gBACF,KAAG,CAAC,OAAO,GAAG,cAAM,OAAA,MAAM,EAAE,GAAA,CAAC;gBAC7B,KAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aACzC;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;SACF,CAAC,CAAC;KACJ;;;;IAKK,yBAAM,GAAZ,UAAa,IAA6B;;;;;;wBACxC,IAAI,IAAI;4BAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC/B,IAAI,IAAI,CAAC,OAAO,KAAK,WAAW,IAAI,IAAI,CAAC,OAAO,KAAK,UAAU,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;4BAC5F,sBAAO;yBACR;wBACD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;wBAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;;;;wBAElB,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;wBAAnB,SAAmB,CAAC;wBACpB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;wBACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC;;;;6BAE1C,IAAI,CAAC,kBAAkB,EAAE,EAAzB,wBAAyB;wBAC3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;;;wBAEtB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;wBACtB,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAA;;wBAA1C,SAA0C,CAAC;wBAC3C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;;;;;;;KAG3B;;;;IAKO,4BAAS,GAAjB,UAAkB,MAAe;QAC/B,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE;YAC/B,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAM,GAAG,GAAmB,IAAI,cAAc,EAAE,CAAC;YACjD,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtB,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE;gBACrC,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtF,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACpC,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC7D,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,WAAS,MAAM,UAAI,GAAG,GAAG,CAAC,UAAI,IAAI,CAAC,IAAM,CAAC,CAAC;gBACjF,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,0BAA0B,CAAC,CAAC;aAClE;iBAAM;gBACL,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAW,IAAI,CAAC,IAAM,CAAC,CAAC;aAC/D;YACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB;KACF;IAEO,8BAAW,GAAnB,UAAoB,GAAmB;QAAvC,iBAoCC;QAnCC,IAAM,OAAO,GAAG;;;;wBACd,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAAE;4BAC7B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;4BACtB,sBAAO;yBACR;wBACD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;wBACtB,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAA;;wBAAjC,SAAiC,CAAC;wBAClC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;4BACtB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;4BACtB,sBAAO;yBACR;wBACD,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;4BACtB,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;yBACrB;wBACD,IAAI,CAAC,YAAY,EAAE,CAAC;wBACpB,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;;wBAE1B,IAAI,CAAC,SAAS,EAAE,CAAC;;;;aAClB,CAAC;QACF,IAAM,SAAS,GAAG;YAChB,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAM,MAAM,GAAG,KAAI,CAAC,UAAU,KAAK,GAAG,IAAI,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACvE,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;;gBAE9B,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACnB,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;aACxB;iBAAM,IAAI,KAAI,CAAC,UAAU,KAAK,GAAG,EAAE;gBAClC,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,KAAI,CAAC,MAAM,GAAG,UAAU,CAAC;aAC1B;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;SACF,CAAC;QACF,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;QACtB,GAAG,CAAC,MAAM,GAAG,SAAS,CAAC;KACxB;IAEO,qCAAkB,GAA1B,UAA2B,MAAc,EAAE,GAAW;QAAtD,iBAWC;QAVC,OAAO,UAAC,MAAqB;YAC3B,IAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB;kBACpC,MAAM,GAAG,CAAC,GAAG,GAAG,MAAM,KAAK,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;kBACxD,MAAM,CAAC;YACX,KAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAI,CAAC,IAAI,IAAI,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACjC,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,IAAI,GAAG,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;YACpE,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,KAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,KAAI,CAAC,KAAK,CAAC,CAAC;YAChE,KAAI,CAAC,WAAW,EAAE,CAAC;SACpB,CAAC;KACH;IAEO,qCAAkB,GAA1B,UAA2B,GAAmB;QAC5C,IAAM,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACvC,IAAA,8CAAwC,EAAvC,aAAuC,CAAC;QAC/C,OAAO,KAAK,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;KAC5B;IAEO,2BAAQ,GAAhB,UAAiB,GAAmB;QAApC,iBAaC;;QAXC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QAEjB,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC;QAC1B,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CAAC;;QAEvF,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,YAAU,IAAI,CAAC,MAAQ,CAAC,CAAC;KAC/E;IAED,0BAAO,GAAP,UAAQ,MAAc,EAAE,OAAc;QAAtC,iBAaC;QAbuB,wBAAA,EAAA,cAAc;QACpC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAM,GAAG,GAAmB,IAAI,cAAc,EAAE,CAAC;YACjD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,KAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAC/C,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnB,GAAG,CAAC,MAAM,GAAG;gBACX,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;gBAC1B,OAAO,EAAE,CAAC;aACX,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,cAAM,OAAA,MAAM,EAAE,GAAA,CAAC;YAC7B,IAAM,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;YACtD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB,CAAC,CAAC;KACJ;IACH,eAAC;CAAA,IAAA;AAED,SAAS,kBAAkB,CAAC,GAAmB,EAAE,GAAW;IAC1D,IAAM,UAAU,GAAG,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAC9C,IAAI,UAAU,EAAE;QACd,OAAO,UAAU,CAAC;KACnB;IACD,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACtC,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;IACtF,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;CACzB;AAED,SAAS,SAAS,CAAC,GAAmB;IACpC,OAAO,OAAO,GAAG,CAAC,QAAQ,KAAK,QAAQ,GAAG,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC;CAC/F;AAED,SAAS,MAAM,CAAI,KAA8B,EAAE,IAAW;IAC5D,OAAO,KAAK,YAAY,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;CACxD;;;IC5RC;QAAA,iBAMC;QAnCgB,iBAAY,GAAyB,IAAI,OAAO,EAAE,CAAC;QAIpE,UAAK,GAAe,EAAE,CAAC;QACf,gBAAW,GAAG,CAAC,CAAC;QAChB,eAAU,GAAG,IAAI,CAAC;QAE1B,gBAAW,GAAG,UAAC,GAAgB;YAC7B,UAAU,CAAC;gBACT,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC7B,CAAC,CAAC;SACJ,CAAC;QAkBA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,GAAgB;YACrC,IAAI,GAAG,CAAC,MAAM,KAAK,WAAW,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,EAAE;gBACxD,KAAI,CAAC,YAAY,EAAE,CAAC;aACrB;SACF,CAAC,CAAC;KACJ;IAlCD,sBAAI,kCAAM;aAAV;YACE,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;SACzC;;;OAAA;IAWD,sBAAI,2CAAe;aAAnB;YACE,OAAO;gBACL,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM;;gBAErC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,SAAS;gBAChE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;gBAC7B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;gBAC/B,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;gBACzB,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;gBACjC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;gBAC7C,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB;gBAC/C,WAAW,EAAE,IAAI,CAAC,WAAW;aAC9B,CAAC;SACH;;;OAAA;;;;;;IAcD,6BAAI,GAAJ,UAAK,OAAuB;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC;QAC3D,IAAI,CAAC,UAAU,GAAG,EAAE,OAAO,CAAC,UAAU,KAAK,KAAK,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;;;;IAMD,gCAAO,GAAP,UAAQ,OAAwB;QAAhC,iBAKC;QAJC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAC5C,SAAS,CAAC,CAAC,CAAC,EACZ,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,GAAA,CAAC,CACtB,CAAC;KACH;;;;IAKD,mCAAU,GAAV;QACE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,QAAC,CAAC,CAAC,MAAM,GAAG,QAAQ,IAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;KACjB;;;;IAID,uCAAc,GAAd,UAAe,QAAkB;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAM,QAAQ,GAAa,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YAChF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1B,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC;SAC3B;QACD,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;;;;IAID,mCAAU,GAAV,UAAW,IAAU;QACnB,IAAM,QAAQ,GAAa,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACpE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1B,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;;;;;IAKO,wCAAe,GAAvB;QACE,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,OAAO,GAAA,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,QAAC,CAAC,CAAC,MAAM,GAAG,OAAO,IAAC,CAAC,CAAC;SACjF;KACF;;;;;;;IAOD,gCAAO,GAAP,UAAQ,KAA0B;QAChC,QAAQ,KAAK,CAAC,MAAM;YAClB,KAAK,WAAW;gBACd,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,QAAC,CAAC,CAAC,MAAM,GAAG,WAAW,IAAC,CAAC,CAAC;gBAClD,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,QAAC,CAAC,CAAC,MAAM,GAAG,QAAQ,IAAC,CAAC,CAAC;gBAC/C,MAAM;YACR,KAAK,cAAc;gBACjB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;gBACrD,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,WAAW,GAAA,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,QAAC,CAAC,CAAC,MAAM,GAAG,OAAO,IAAC,CAAC,CAAC;gBACpF,MAAM;YACR,KAAK,QAAQ;gBACX,IAAM,UAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC;gBAC9D,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,KAAK,UAAQ,GAAA,CAAC,CAAC;gBAC7D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBACpC,MAAM,CAAC,MAAM,GAAG,OAAuB,CAAC;gBACxC,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,GAAA,CAAC,CAAC,MAAM,GAAG,WAAW,CAAC;gBACzE,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,GAAA,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;gBACtE,MAAM;YACR;gBACE,MAAM;SACT;KACF;;;;;IAMO,qCAAY,GAApB;;QAEE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,WAAW,GAAA,CAAC,CAAC;QAE9D,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtC,IAAI,CAAC,KAAK;aACP,MAAM,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,MAAM,KAAK,OAAO,GAAA,CAAC;aAC3D,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,CAAC,CAAC,CAAC;aACjD,OAAO,CAAC,UAAC,QAAkB;YAC1B,QAAQ,CAAC,MAAM,EAAE,CAAC;SACnB,CAAC,CAAC;KACN;;;;IAID,uCAAc,GAAd;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CACtB,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,MAAM,KAAK,WAAW,IAAI,QAAQ,CAAC,MAAM,KAAK,OAAO,GAAA,CACvF,CAAC,MAAM,CAAC;KACV;;IA7JU,cAAc;QAD1B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;;OACtB,cAAc,CA8J1B;yBA3KD;CAaA;;;ICiBE,0BACU,UAAsB,EACtB,QAAmB,EACnB,aAA6B;QAHvC,iBAII;QAHM,eAAU,GAAV,UAAU,CAAY;QACtB,aAAQ,GAAR,QAAQ,CAAW;QACnB,kBAAa,GAAb,aAAa,CAAgB;QAZvC,iBAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QAwClC,iBAAY,GAAG;YACb,IAAI,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE;gBACvC,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aACxE;SACF,CAAC;KA/BE;IATJ,sBAAI,2CAAa;aAAjB,UAAkB,SAA8B;YAC9C,IAAI,SAAS,IAAI,IAAI,CAAC,aAAa,EAAE;gBACnC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aACvC;SACF;;;OAAA;IAOD,mCAAQ,GAAR;QACE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC7B,IAAI,CAAC,QAAQ,CAAC,YAAY,CACxB,IAAI,CAAC,UAAU,CAAC,aAAa,EAC7B,QAAQ,EACR,IAAI,CAAC,OAAO,CAAC,YAAY,CAC1B,CAAC;aACH;YACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvC;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAA0B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC3E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CACpC,IAAI,CAAC,UAAU,CAAC,aAAa,EAC7B,QAAQ,EACR,IAAI,CAAC,YAAY,CAClB,CAAC;KACH;IAED,sCAAW,GAAX;QACE,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;KACF;IAtCDA;QADC,MAAM,EAAE;;0DACyB;IAElCA;QADC,KAAK,EAAE;kCACC,cAAc;qDAAC;IAExBA;QADC,KAAK,EAAE;;;yDAKP;IAXU,gBAAgB;QAH5B,SAAS,CAAC;YACT,QAAQ,EAAE,WAAW;SACtB,CAAC;yCAcsB,UAAU;YACZ,SAAS;YACJ,cAAc;OAf5B,gBAAgB,CAgD5B;IAAD,uBAAC;CAhDD;;;ICRA;KAA6B;IAAhB,aAAa;QALzB,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,YAAY,CAAC;YACvB,YAAY,EAAE,CAAC,gBAAgB,CAAC;YAChC,OAAO,EAAE,CAAC,gBAAgB,CAAC;SAC5B,CAAC;OACW,aAAa,CAAG;IAAD,oBAAC;CAA7B;;ACVA;;GAEG;;;;"}