import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { Uploader } from './uploader';
import { map, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
let UploadxService = class UploadxService {
    constructor() {
        this.eventsStream = new Subject();
        this.queue = [];
        this.concurrency = 2;
        this.autoUpload = true;
        this.stateChange = (evt) => {
            setTimeout(() => {
                this.eventsStream.next(evt);
            });
        };
        this.events.subscribe((evt) => {
            if (evt.status !== 'uploading' && evt.status !== 'added') {
                this.processQueue();
            }
        });
    }
    get events() {
        return this.eventsStream.asObservable();
    }
    get uploaderOptions() {
        return {
            method: this.options.method || 'POST',
            // tslint:disable-next-line: deprecation
            endpoint: this.options.endpoint || this.options.url || '/upload',
            headers: this.options.headers,
            metadata: this.options.metadata,
            token: this.options.token,
            chunkSize: this.options.chunkSize,
            withCredentials: this.options.withCredentials,
            maxRetryAttempts: this.options.maxRetryAttempts,
            stateChange: this.stateChange
        };
    }
    /**
     * Initializes service
     * @param options global options
     * @returns Observable that emits a new value on progress or status changes
     */
    init(options) {
        this.options = options;
        this.concurrency = options.concurrency || this.concurrency;
        this.autoUpload = !(options.autoUpload === false);
        return this.events;
    }
    /**
     * Initializes service
     * @param options global options
     * @returns Observable that emits the current queue
     */
    connect(options) {
        return this.init(options || this.options).pipe(startWith(0), map(() => this.queue));
    }
    /**
     * Terminate all uploads and clears the queue
     */
    disconnect() {
        this.queue.forEach(f => (f.status = 'paused'));
        this.queue = [];
    }
    /**
     * Create Uploader and add to the queue
     */
    handleFileList(fileList) {
        for (let i = 0; i < fileList.length; i++) {
            const uploader = new Uploader(fileList.item(i), this.uploaderOptions);
            this.queue.push(uploader);
            uploader.status = 'added';
        }
        this.autoUploadFiles();
    }
    /**
     * Create Uploader for the file and add to the queue
     */
    handleFile(file) {
        const uploader = new Uploader(file, this.uploaderOptions);
        this.queue.push(uploader);
        uploader.status = 'added';
        this.autoUploadFiles();
    }
    /**
     * Auto upload the files if the flag is true
     * @internal
     */
    autoUploadFiles() {
        if (this.autoUpload) {
            this.queue.filter(f => f.status === 'added').forEach(f => (f.status = 'queue'));
        }
    }
    /**
     * Control uploads status
     * @example
     * this.uploadService.control({ action: 'pauseAll' });
     *
     */
    control(event) {
        switch (event.action) {
            case 'cancelAll':
                this.queue.forEach(f => (f.status = 'cancelled'));
                break;
            case 'pauseAll':
                this.queue.forEach(f => (f.status = 'paused'));
                break;
            case 'refreshToken':
                this.queue.forEach(f => f.refreshToken(event.token));
                break;
            case 'uploadAll':
                this.queue.filter(f => f.status !== 'uploading').forEach(f => (f.status = 'queue'));
                break;
            case 'upload':
                const uploadId = event.uploadId || event.itemOptions.uploadId;
                const upload = this.queue.find(f => f.uploadId === uploadId);
                upload.configure(event.itemOptions);
                upload.status = 'queue';
                break;
            case 'cancel':
                this.queue.find(f => f.uploadId === event.uploadId).status = 'cancelled';
                break;
            case 'pause':
                this.queue.find(f => f.uploadId === event.uploadId).status = 'paused';
                break;
            default:
                break;
        }
    }
    /**
     * Queue management
     * @internal
     */
    processQueue() {
        // Remove Cancelled Items from local queue
        this.queue = this.queue.filter(f => f.status !== 'cancelled');
        const running = this.runningProcess();
        this.queue
            .filter((uploader) => uploader.status === 'queue')
            .slice(0, Math.max(this.concurrency - running, 0))
            .forEach((uploader) => {
            uploader.upload();
        });
    }
    /**
     * @returns  number of active uploads
     */
    runningProcess() {
        return this.queue.filter((uploader) => uploader.status === 'uploading' || uploader.status === 'retry').length;
    }
};
UploadxService.ngInjectableDef = i0.defineInjectable({ factory: function UploadxService_Factory() { return new UploadxService(); }, token: UploadxService, providedIn: "root" });
UploadxService = tslib_1.__decorate([
    Injectable({ providedIn: 'root' }),
    tslib_1.__metadata("design:paramtypes", [])
], UploadxService);
export { UploadxService };
//# sourceMappingURL=data:application/json;base64,