import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter } from '@angular/core';
import { UploadxOptions } from './interfaces';
import { UploadxService } from './uploadx.service';
let UploadxDirective = class UploadxDirective {
    constructor(elementRef, renderer, uploadService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.uploadService = uploadService;
        this.uploadxState = new EventEmitter();
        this.fileListener = () => {
            if (this.elementRef.nativeElement.files) {
                this.uploadService.handleFileList(this.elementRef.nativeElement.files);
            }
        };
    }
    set uploadxAction(ctrlEvent) {
        if (ctrlEvent && this.uploadService) {
            this.uploadService.control(ctrlEvent);
        }
    }
    ngOnInit() {
        if (this.uploadx) {
            if (this.uploadx.allowedTypes) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', this.uploadx.allowedTypes);
            }
            this.uploadService.init(this.uploadx);
        }
        this.uploadxState.emit(this.uploadService.events);
        this.listenerFn = this.renderer.listen(this.elementRef.nativeElement, 'change', this.fileListener);
    }
    ngOnDestroy() {
        if (this.listenerFn) {
            this.listenerFn();
        }
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], UploadxDirective.prototype, "uploadxState", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", UploadxOptions)
], UploadxDirective.prototype, "uploadx", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], UploadxDirective.prototype, "uploadxAction", null);
UploadxDirective = tslib_1.__decorate([
    Directive({
        selector: '[uploadx]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        UploadxService])
], UploadxDirective);
export { UploadxDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkeC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdXBsb2FkeC8iLCJzb3VyY2VzIjpbInVwbG9hZHguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBR1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLGNBQWMsRUFBb0MsTUFBTSxjQUFjLENBQUM7QUFDaEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS25ELElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBWTNCLFlBQ1UsVUFBc0IsRUFDdEIsUUFBbUIsRUFDbkIsYUFBNkI7UUFGN0IsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQVp2QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUF3Q2xDLGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4RTtRQUNILENBQUMsQ0FBQztJQS9CQyxDQUFDO0lBVEosSUFBSSxhQUFhLENBQUMsU0FBOEI7UUFDOUMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFPRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFDN0IsUUFBUSxFQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUMxQixDQUFDO2FBQ0g7WUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBMEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFDN0IsUUFBUSxFQUNSLElBQUksQ0FBQyxZQUFZLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0NBT0YsQ0FBQTtBQTdDQztJQURDLE1BQU0sRUFBRTs7c0RBQ3lCO0FBRWxDO0lBREMsS0FBSyxFQUFFO3NDQUNDLGNBQWM7aURBQUM7QUFFeEI7SUFEQyxLQUFLLEVBQUU7OztxREFLUDtBQVhVLGdCQUFnQjtJQUg1QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsV0FBVztLQUN0QixDQUFDOzZDQWNzQixVQUFVO1FBQ1osU0FBUztRQUNKLGNBQWM7R0FmNUIsZ0JBQWdCLENBZ0Q1QjtTQWhEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgVXBsb2FkeE9wdGlvbnMsIFVwbG9hZFN0YXRlLCBVcGxvYWR4Q29udHJvbEV2ZW50IH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFVwbG9hZHhTZXJ2aWNlIH0gZnJvbSAnLi91cGxvYWR4LnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdXBsb2FkeF0nXG59KVxuZXhwb3J0IGNsYXNzIFVwbG9hZHhEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIGxpc3RlbmVyRm46ICgpID0+IHZvaWQ7XG4gIEBPdXRwdXQoKVxuICB1cGxvYWR4U3RhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpXG4gIHVwbG9hZHg6IFVwbG9hZHhPcHRpb25zO1xuICBASW5wdXQoKVxuICBzZXQgdXBsb2FkeEFjdGlvbihjdHJsRXZlbnQ6IFVwbG9hZHhDb250cm9sRXZlbnQpIHtcbiAgICBpZiAoY3RybEV2ZW50ICYmIHRoaXMudXBsb2FkU2VydmljZSkge1xuICAgICAgdGhpcy51cGxvYWRTZXJ2aWNlLmNvbnRyb2woY3RybEV2ZW50KTtcbiAgICB9XG4gIH1cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHVwbG9hZFNlcnZpY2U6IFVwbG9hZHhTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy51cGxvYWR4KSB7XG4gICAgICBpZiAodGhpcy51cGxvYWR4LmFsbG93ZWRUeXBlcykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShcbiAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAnYWNjZXB0JyxcbiAgICAgICAgICB0aGlzLnVwbG9hZHguYWxsb3dlZFR5cGVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwbG9hZFNlcnZpY2UuaW5pdCh0aGlzLnVwbG9hZHgpO1xuICAgIH1cbiAgICB0aGlzLnVwbG9hZHhTdGF0ZS5lbWl0KDxPYnNlcnZhYmxlPFVwbG9hZFN0YXRlPj50aGlzLnVwbG9hZFNlcnZpY2UuZXZlbnRzKTtcbiAgICB0aGlzLmxpc3RlbmVyRm4gPSB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgJ2NoYW5nZScsXG4gICAgICB0aGlzLmZpbGVMaXN0ZW5lclxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lckZuKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyRm4oKTtcbiAgICB9XG4gIH1cblxuICBmaWxlTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZpbGVzKSB7XG4gICAgICB0aGlzLnVwbG9hZFNlcnZpY2UuaGFuZGxlRmlsZUxpc3QodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZmlsZXMpO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==