import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter } from '@angular/core';
import { UploadxOptions } from './interfaces';
import { UploadxService } from './uploadx.service';
var UploadxDirective = /** @class */ (function () {
    function UploadxDirective(elementRef, renderer, uploadService) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.uploadService = uploadService;
        this.uploadxState = new EventEmitter();
        this.fileListener = function () {
            if (_this.elementRef.nativeElement.files) {
                _this.uploadService.handleFileList(_this.elementRef.nativeElement.files);
            }
        };
    }
    Object.defineProperty(UploadxDirective.prototype, "uploadxAction", {
        set: function (ctrlEvent) {
            if (ctrlEvent && this.uploadService) {
                this.uploadService.control(ctrlEvent);
            }
        },
        enumerable: true,
        configurable: true
    });
    UploadxDirective.prototype.ngOnInit = function () {
        if (this.uploadx) {
            if (this.uploadx.allowedTypes) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', this.uploadx.allowedTypes);
            }
            this.uploadService.init(this.uploadx);
        }
        this.uploadxState.emit(this.uploadService.events);
        this.listenerFn = this.renderer.listen(this.elementRef.nativeElement, 'change', this.fileListener);
    };
    UploadxDirective.prototype.ngOnDestroy = function () {
        if (this.listenerFn) {
            this.listenerFn();
        }
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], UploadxDirective.prototype, "uploadxState", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", UploadxOptions)
    ], UploadxDirective.prototype, "uploadx", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], UploadxDirective.prototype, "uploadxAction", null);
    UploadxDirective = tslib_1.__decorate([
        Directive({
            selector: '[uploadx]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            UploadxService])
    ], UploadxDirective);
    return UploadxDirective;
}());
export { UploadxDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkeC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdXBsb2FkeC8iLCJzb3VyY2VzIjpbInVwbG9hZHguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBR1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLGNBQWMsRUFBb0MsTUFBTSxjQUFjLENBQUM7QUFDaEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS25EO0lBWUUsMEJBQ1UsVUFBc0IsRUFDdEIsUUFBbUIsRUFDbkIsYUFBNkI7UUFIdkMsaUJBSUk7UUFITSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsa0JBQWEsR0FBYixhQUFhLENBQWdCO1FBWnZDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQXdDbEMsaUJBQVksR0FBRztZQUNiLElBQUksS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO2dCQUN2QyxLQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4RTtRQUNILENBQUMsQ0FBQztJQS9CQyxDQUFDO0lBVEosc0JBQUksMkNBQWE7YUFBakIsVUFBa0IsU0FBOEI7WUFDOUMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDdkM7UUFDSCxDQUFDOzs7T0FBQTtJQU9ELG1DQUFRLEdBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtnQkFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUM3QixRQUFRLEVBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQzFCLENBQUM7YUFDSDtZQUNELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUEwQixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ3BDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUM3QixRQUFRLEVBQ1IsSUFBSSxDQUFDLFlBQVksQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFRCxzQ0FBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNuQjtJQUNILENBQUM7SUF0Q0Q7UUFEQyxNQUFNLEVBQUU7OzBEQUN5QjtJQUVsQztRQURDLEtBQUssRUFBRTswQ0FDQyxjQUFjO3FEQUFDO0lBRXhCO1FBREMsS0FBSyxFQUFFOzs7eURBS1A7SUFYVSxnQkFBZ0I7UUFINUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFdBQVc7U0FDdEIsQ0FBQztpREFjc0IsVUFBVTtZQUNaLFNBQVM7WUFDSixjQUFjO09BZjVCLGdCQUFnQixDQWdENUI7SUFBRCx1QkFBQztDQUFBLEFBaERELElBZ0RDO1NBaERZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgUmVuZGVyZXIyLFxuICBPbkluaXQsXG4gIE9uRGVzdHJveSxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBVcGxvYWR4T3B0aW9ucywgVXBsb2FkU3RhdGUsIFVwbG9hZHhDb250cm9sRXZlbnQgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgVXBsb2FkeFNlcnZpY2UgfSBmcm9tICcuL3VwbG9hZHguc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t1cGxvYWR4XSdcbn0pXG5leHBvcnQgY2xhc3MgVXBsb2FkeERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgbGlzdGVuZXJGbjogKCkgPT4gdm9pZDtcbiAgQE91dHB1dCgpXG4gIHVwbG9hZHhTdGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KClcbiAgdXBsb2FkeDogVXBsb2FkeE9wdGlvbnM7XG4gIEBJbnB1dCgpXG4gIHNldCB1cGxvYWR4QWN0aW9uKGN0cmxFdmVudDogVXBsb2FkeENvbnRyb2xFdmVudCkge1xuICAgIGlmIChjdHJsRXZlbnQgJiYgdGhpcy51cGxvYWRTZXJ2aWNlKSB7XG4gICAgICB0aGlzLnVwbG9hZFNlcnZpY2UuY29udHJvbChjdHJsRXZlbnQpO1xuICAgIH1cbiAgfVxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdXBsb2FkU2VydmljZTogVXBsb2FkeFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnVwbG9hZHgpIHtcbiAgICAgIGlmICh0aGlzLnVwbG9hZHguYWxsb3dlZFR5cGVzKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICdhY2NlcHQnLFxuICAgICAgICAgIHRoaXMudXBsb2FkeC5hbGxvd2VkVHlwZXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBsb2FkU2VydmljZS5pbml0KHRoaXMudXBsb2FkeCk7XG4gICAgfVxuICAgIHRoaXMudXBsb2FkeFN0YXRlLmVtaXQoPE9ic2VydmFibGU8VXBsb2FkU3RhdGU+PnRoaXMudXBsb2FkU2VydmljZS5ldmVudHMpO1xuICAgIHRoaXMubGlzdGVuZXJGbiA9IHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAnY2hhbmdlJyxcbiAgICAgIHRoaXMuZmlsZUxpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmxpc3RlbmVyRm4pIHtcbiAgICAgIHRoaXMubGlzdGVuZXJGbigpO1xuICAgIH1cbiAgfVxuXG4gIGZpbGVMaXN0ZW5lciA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZmlsZXMpIHtcbiAgICAgIHRoaXMudXBsb2FkU2VydmljZS5oYW5kbGVGaWxlTGlzdCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5maWxlcyk7XG4gICAgfVxuICB9O1xufVxuIl19