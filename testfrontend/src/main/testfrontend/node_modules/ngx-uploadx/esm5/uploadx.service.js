import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { Uploader } from './uploader';
import { map, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
var UploadxService = /** @class */ (function () {
    function UploadxService() {
        var _this = this;
        this.eventsStream = new Subject();
        this.queue = [];
        this.concurrency = 2;
        this.autoUpload = true;
        this.stateChange = function (evt) {
            setTimeout(function () {
                _this.eventsStream.next(evt);
            });
        };
        this.events.subscribe(function (evt) {
            if (evt.status !== 'uploading' && evt.status !== 'added') {
                _this.processQueue();
            }
        });
    }
    Object.defineProperty(UploadxService.prototype, "events", {
        get: function () {
            return this.eventsStream.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadxService.prototype, "uploaderOptions", {
        get: function () {
            return {
                method: this.options.method || 'POST',
                // tslint:disable-next-line: deprecation
                endpoint: this.options.endpoint || this.options.url || '/upload',
                headers: this.options.headers,
                metadata: this.options.metadata,
                token: this.options.token,
                chunkSize: this.options.chunkSize,
                withCredentials: this.options.withCredentials,
                maxRetryAttempts: this.options.maxRetryAttempts,
                stateChange: this.stateChange
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes service
     * @param options global options
     * @returns Observable that emits a new value on progress or status changes
     */
    UploadxService.prototype.init = function (options) {
        this.options = options;
        this.concurrency = options.concurrency || this.concurrency;
        this.autoUpload = !(options.autoUpload === false);
        return this.events;
    };
    /**
     * Initializes service
     * @param options global options
     * @returns Observable that emits the current queue
     */
    UploadxService.prototype.connect = function (options) {
        var _this = this;
        return this.init(options || this.options).pipe(startWith(0), map(function () { return _this.queue; }));
    };
    /**
     * Terminate all uploads and clears the queue
     */
    UploadxService.prototype.disconnect = function () {
        this.queue.forEach(function (f) { return (f.status = 'paused'); });
        this.queue = [];
    };
    /**
     * Create Uploader and add to the queue
     */
    UploadxService.prototype.handleFileList = function (fileList) {
        for (var i = 0; i < fileList.length; i++) {
            var uploader = new Uploader(fileList.item(i), this.uploaderOptions);
            this.queue.push(uploader);
            uploader.status = 'added';
        }
        this.autoUploadFiles();
    };
    /**
     * Create Uploader for the file and add to the queue
     */
    UploadxService.prototype.handleFile = function (file) {
        var uploader = new Uploader(file, this.uploaderOptions);
        this.queue.push(uploader);
        uploader.status = 'added';
        this.autoUploadFiles();
    };
    /**
     * Auto upload the files if the flag is true
     * @internal
     */
    UploadxService.prototype.autoUploadFiles = function () {
        if (this.autoUpload) {
            this.queue.filter(function (f) { return f.status === 'added'; }).forEach(function (f) { return (f.status = 'queue'); });
        }
    };
    /**
     * Control uploads status
     * @example
     * this.uploadService.control({ action: 'pauseAll' });
     *
     */
    UploadxService.prototype.control = function (event) {
        switch (event.action) {
            case 'cancelAll':
                this.queue.forEach(function (f) { return (f.status = 'cancelled'); });
                break;
            case 'pauseAll':
                this.queue.forEach(function (f) { return (f.status = 'paused'); });
                break;
            case 'refreshToken':
                this.queue.forEach(function (f) { return f.refreshToken(event.token); });
                break;
            case 'uploadAll':
                this.queue.filter(function (f) { return f.status !== 'uploading'; }).forEach(function (f) { return (f.status = 'queue'); });
                break;
            case 'upload':
                var uploadId_1 = event.uploadId || event.itemOptions.uploadId;
                var upload = this.queue.find(function (f) { return f.uploadId === uploadId_1; });
                upload.configure(event.itemOptions);
                upload.status = 'queue';
                break;
            case 'cancel':
                this.queue.find(function (f) { return f.uploadId === event.uploadId; }).status = 'cancelled';
                break;
            case 'pause':
                this.queue.find(function (f) { return f.uploadId === event.uploadId; }).status = 'paused';
                break;
            default:
                break;
        }
    };
    /**
     * Queue management
     * @internal
     */
    UploadxService.prototype.processQueue = function () {
        // Remove Cancelled Items from local queue
        this.queue = this.queue.filter(function (f) { return f.status !== 'cancelled'; });
        var running = this.runningProcess();
        this.queue
            .filter(function (uploader) { return uploader.status === 'queue'; })
            .slice(0, Math.max(this.concurrency - running, 0))
            .forEach(function (uploader) {
            uploader.upload();
        });
    };
    /**
     * @returns  number of active uploads
     */
    UploadxService.prototype.runningProcess = function () {
        return this.queue.filter(function (uploader) { return uploader.status === 'uploading' || uploader.status === 'retry'; }).length;
    };
    UploadxService.ngInjectableDef = i0.defineInjectable({ factory: function UploadxService_Factory() { return new UploadxService(); }, token: UploadxService, providedIn: "root" });
    UploadxService = tslib_1.__decorate([
        Injectable({ providedIn: 'root' }),
        tslib_1.__metadata("design:paramtypes", [])
    ], UploadxService);
    return UploadxService;
}());
export { UploadxService };
//# sourceMappingURL=data:application/json;base64,