/**
 * Implements XHR/CORS Resumable Upload
 * @see
 * https://developers.google.com/drive/v3/web/resumable-upload
 */
import { UploadStatus, UploadItem } from './interfaces';
/**
 *
 */
export interface UploaderOptions extends UploadItem {
    maxRetryAttempts: number;
    chunkSize?: number;
    withCredentials?: boolean;
    readonly stateChange?: any;
}
export declare class Uploader {
    private readonly file;
    options: UploaderOptions;
    headers: {
        [key: string]: string;
    } | null;
    metadata: {
        [key: string]: any;
    };
    endpoint: string;
    private _status;
    private retry;
    private startTime;
    progress: number;
    readonly mimeType: string;
    readonly name: string;
    readonly size: number;
    readonly uploadId: string;
    remaining: number;
    response: any;
    responseStatus: number;
    speed: number;
    URI: string;
    token: string | (() => string);
    private statusType;
    private _token;
    private _xhr_;
    private chunkSize;
    private maxRetryAttempts;
    private stateChange;
    status: UploadStatus;
    /**
     * Creates an instance of Uploader.
     */
    constructor(file: File, options: UploaderOptions);
    /**
     * configure or reconfigure uploader
     */
    configure(item?: UploadItem): void;
    /**
     * Emit current state
     */
    private notifyState;
    private processResponse;
    refreshToken(token?: any): void;
    private maxAttemptsReached;
    private create;
    /**
     * Initiate upload
     */
    upload(item?: UploadItem | undefined): Promise<void>;
    /**
     * Chunk upload +/ get offset
     */
    private sendChunk;
    private setupEvents;
    private setupProgressEvent;
    private getNextChunkOffset;
    private setupXHR;
    request(method: string, payload?: any): Promise<{}>;
}
