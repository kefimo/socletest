import { Observable } from 'rxjs';
import { UploadState, UploadxControlEvent, UploadxOptions } from './interfaces';
import { Uploader, UploaderOptions } from './uploader';
export declare class UploadxService {
    private readonly eventsStream;
    readonly events: Observable<UploadState>;
    queue: Uploader[];
    private concurrency;
    private autoUpload;
    private options;
    stateChange: (evt: UploadState) => void;
    readonly uploaderOptions: UploaderOptions;
    constructor();
    /**
     * Initializes service
     * @param options global options
     * @returns Observable that emits a new value on progress or status changes
     */
    init(options: UploadxOptions): Observable<UploadState>;
    /**
     * Initializes service
     * @param options global options
     * @returns Observable that emits the current queue
     */
    connect(options?: UploadxOptions): Observable<Uploader[]>;
    /**
     * Terminate all uploads and clears the queue
     */
    disconnect(): void;
    /**
     * Create Uploader and add to the queue
     */
    handleFileList(fileList: FileList): void;
    /**
     * Create Uploader for the file and add to the queue
     */
    handleFile(file: File): void;
    /**
     * Auto upload the files if the flag is true
     * @internal
     */
    private autoUploadFiles;
    /**
     * Control uploads status
     * @example
     * this.uploadService.control({ action: 'pauseAll' });
     *
     */
    control(event: UploadxControlEvent): void;
    /**
     * Queue management
     * @internal
     */
    private processQueue;
    /**
     * @returns  number of active uploads
     */
    runningProcess(): number;
}
